buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0-beta-4583'
  }
}

plugins {
	id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'


//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src/java' }
        kotlin
        { srcDir 'src/kotlin' }
		resources
		{  srcDir 'src/resources' }
	}
	test
	{
		java
		{ srcDir 'src/java' }
        kotlin
        { srcDir 'src/kotlin' }
		resources
		{  srcDir 'src/resources' }
	}
}


sourceCompatibility = 1.7


test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

dependencies
{
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.0.0-beta-4583'

	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
    compile ('org.jogamp.jogl:jogl-all:2.3.1'){transitive = true}

    // usage: gradle .... -Plocal=true
	if (project.hasProperty('local')) {
		println 'Using local clearGL sources'
		compile project(':cleargl')
	}
	else {
		println 'Using clearCUDA and clearGL from Maven repository'/**/
		compile group: "net.clearvolume", name: "cleargl", version: "(,1.1.0]", changing: true, transitive: true
	}


	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

repositories
{
	mavenCentral()
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
	maven
	{ url  "http://dl.bintray.com/rtlib/CoreMem" }

}



task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

//***********************************************************************************
// TEST PROG

task TestProgFatJar(type:Jar) {
	archiveName = "TestProg.jar"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar

	manifest {
		attributes("Class-Path": ".", 'Main-Class': 'scenery.testprog.JOGLTestProgram')
	}
}




//***********************************************************************************
// BINTRAY PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
		def stdout = new ByteArrayOutputStream()
		exec {
				commandLine 'git', 'describe', '--tags'
				standardOutput = stdout
		}
		return stdout.toString().trim()
}

group = 'net.clearvolume'

if(project.hasProperty('releasebuild')) {
    version = getVersionName()
} else {
    version = "1.0-SNAPSHOT"
}

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

if(hasProperty('bintray_user') && hasProperty('bintray_key') )
{
	bintray {

		// property must be set in ~/.gradle/gradle.properties
		user = bintray_user
		key =  bintray_key

		configurations = [
			'default'] //When uploading configuration files
		// - OR -
		//publications = ['mavenStuff'] //When uploading Maven-based publication files
		// - AND/OR -
		/*filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
		 from 'arbitrary-files'
		 into 'standalone_files/level1'
		 rename '(.+)\\.(.+)', '$1-suffix.$2'
		 }/**/


		dryRun = false //Whether to run this as dry-run, without deploying
		publish = true //If version should be auto published after an upload
		pkg {
			repo = 'ClearVolume'
			userOrg = 'clearvolume' //An optional organization name when the repo belongs to one of the user's orgs
			name = 'scenery'
			desc = 'scenery'
			websiteUrl = 'https://clearvolume.github.io/ClearVolume/'
			issueTrackerUrl = 'https://github.com/ClearVolume/scenery/issues'
			vcsUrl = 'https://github.com/ClearVolume/scenery.git'
			licenses = ['Apache-2.0']
			labels = [
				'scenery',
                'scenegraph',
				'Visualization',
				'3D',
				'OpenGL'
			]
			publicDownloadNumbers = true
			//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
			//Optional version descriptor
			version {
				name = project.version //Bintray logical version name
				desc = '.'
				released  = new java.util.Date()
				vcsTag = project.version
				/*attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
				 gpg {
				 sign = false //Determines whether to GPG sign the files. The default is false
				 passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
				 }
				 mavenCentralSync {
				 sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
				 user = 'userToken' //OSS user token
				 password = 'paasword' //OSS user password
				 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
				 }  /**/          
			}
		}
		/**/
	}
}












