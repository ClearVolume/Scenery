buildscript {
	ext.kotlin_version = '1.0.5-2'
    ext.dokka_version = '0.9.10'
    ext.slf4j_version = '1.7.21'
    ext.lwjgl_version = '3.1.1-SNAPSHOT'
	repositories {
    mavenCentral()
  }
  dependencies {
	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
  }
}

plugins {
	id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'

sourceSets
{
	main
	{
        kotlin
        { srcDirs = ['src/main/kotlin'] }
		resources
		{ srcDirs = ['src/main/resources'] }
	}
	test
	{
        kotlin
        { srcDirs = ['src/test/tests'] }
        java
        { srcDirs = ['src/test/tests'] }
		resources
		{ srcDirs = ['src/test/resources'] }
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[
        compileJava,
        compileTestJava,
	javadoc
]*.options*.encoding = 'UTF-8'

test
{
	testLogging.showStandardStreams = true
	testLogging { events "started", "passed", "skipped", "failed" }

	maxHeapSize = "4G"
}

task runExamples(type: Test) {
    include '**/examples/**'
    exclude '**/unit/**'
    exclude '**/performance/**'
}

task unitTest(type: Test) {
     beforeTest { descriptor ->
     logger.lifecycle("Running test: ${descriptor}")
    }
    
	testLogging.showStandardStreams = true
	testLogging { events "started", "passed", "skipped", "failed" }

    include '**/unit/**'
    exclude '**/examples/**'
    exclude '**/performance/**'
}

task performanceTest(type: Test) {
     beforeTest { descriptor ->
     logger.lifecycle("Running test: ${descriptor}")
    }
    
	testLogging.showStandardStreams = true
	testLogging { events "started", "passed", "skipped", "failed" }

    include '**/performance/**'
    exclude '**/examples/**'
    exclude '**/unit/**'
}

dependencies
{
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile "org.slf4j:slf4j-api:$slf4j_version"
    compile "org.slf4j:slf4j-simple:$slf4j_version"

    compile 'org.scijava:ui-behaviour:1.0.1'
	compile 'org.scijava:scijava-common:2.57.0-SNAPSHOT'
	compile 'org.scijava:script-editor:0.1.1-SNAPSHOT'
	compile 'org.scijava:scripting-javascript:0.4.4-SNAPSHOT'

    compile 'net.clearvolume:scenery-openvr:0.1.0.2'
    compile 'com.nativelibs4java:jnaerator-runtime:0.12'
    compile 'net.java.dev.jna:jna:4.1.0'

    // JInput for controls
    compile group: 'net.java.jinput', name: 'jinput', version: '2.0.6'
    compile group: 'net.java.jinput', name: 'jinput-platform', version: '2.0.6', ext: 'pom'
    compile group: 'net.java.jutils', name: 'jutils', version: '1.0.0'

    // OpenCL support via JOCL
    compile group: 'org.jocl', name: 'jocl', version: '2.0.0'

    // LWJGL for Vulkan support
    compile "org.lwjgl:lwjgl:$lwjgl_version"
    compile "org.lwjgl:lwjgl:$lwjgl_version:natives-windows"
    compile "org.lwjgl:lwjgl:$lwjgl_version:natives-linux"
    compile "org.lwjgl:lwjgl:$lwjgl_version:natives-macos"
    compile "org.lwjgl:lwjgl-glfw:$lwjgl_version"
    compile "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-windows"
    compile "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-linux"
    compile "org.lwjgl:lwjgl-glfw:$lwjgl_version:natives-macos"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjgl_version"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjgl_version:natives-windows"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjgl_version:natives-linux"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjgl_version:natives-macos"
    compile "org.lwjgl:lwjgl-openal:$lwjgl_version"
    compile "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-windows"
    compile "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-linux"
    compile "org.lwjgl:lwjgl-openal:$lwjgl_version:natives-macos"
    compile "org.lwjgl:lwjgl-opencl:$lwjgl_version"
    compile "org.lwjgl:lwjgl-opengl:$lwjgl_version"
    compile "org.lwjgl:lwjgl-sse:$lwjgl_version"
    compile "org.lwjgl:lwjgl-sse:$lwjgl_version:natives-windows"
    compile "org.lwjgl:lwjgl-sse:$lwjgl_version:natives-linux"
    compile "org.lwjgl:lwjgl-sse:$lwjgl_version:natives-macos"
    compile "org.lwjgl:lwjgl-vulkan:$lwjgl_version"

    // fasterxml
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.4"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.4"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.4"
    compile "org.yaml:snakeyaml:1.15"

    compile "graphics.scenery:spirvcrossj:0.1-SNAPSHOT"

    // usage: gradle .... -Plocal=true
	if (project.hasProperty('local')) {
		println 'Using local clearX sources'
		compile project(':ClearGL')
	}
	else {
		println 'Using clearX from Maven repository'/**/
		compile group: "net.clearvolume", name: "cleargl", version: "2.0.0-SNAPSHOT", changing: true, transitive: true
	}


	compile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

repositories
{
	mavenCentral()
    maven
    { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
    maven
    { url "http://maven.imagej.net/content/groups/public" }
    maven
    { url "http://dl.bintray.com/clearcontrol/ClearControl" }
    maven
    { url "http://nativelibs4java.sourceforge.net/maven" }
}

dokka {
    moduleName = 'scenery'
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    processConfigurations = ['compile']
    includes = ['README.md']
    samples = [
        'src/test/kotlin/scenery/tests/examples/BloodCellsExample.kt',
        'src/test/kotlin/scenery/tests/examples/CubeExample.kt',
        'src/test/kotlin/scenery/tests/examples/TexturedCubeExample.kt',
        'src/test/kotlin/scenery/tests/examples/LineExample.kt',
        'src/test/kotlin/scenery/tests/examples/MultiBoxExample.kt',
        'src/test/kotlin/scenery/tests/examples/MultiBoxInstancedExample.kt',
        'src/test/kotlin/scenery/tests/examples/VertexUpdateExample.kt',
        'src/test/kotlin/scenery/tests/examples/OpenVRExample.kt',
        'src/test/kotlin/scenery/tests/examples/FontRenderingExample.kt'
    ]
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/clearvolume/scenery/blob/master/src/main/kotlin"
        suffix = "#L"
    }
    sourceDirs = files('src/main/kotlin')
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

// BINTRAY PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
		def stdout = new ByteArrayOutputStream()
		exec {
				commandLine 'git', 'describe', '--tags'
				standardOutput = stdout
		}
		return stdout.toString().trim()
}

group = 'graphics.scenery'
archivesBaseName = "scenery"

if(project.hasProperty('releasebuild')) {
    version = getVersionName()
} else {
    version = "1.0.0-SNAPSHOT"
}

task testsJar(type: Jar, dependsOn:classes) {
    classifier = 'tests'
    from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts
{
	archives sourcesJar
	archives javadocJar
    archives testsJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://maven.imagej.net/content/repositories/releases") {
                authentication(userName: "$System.env.CI_DEPLOY_USERNAME", password: "$System.env.CI_DEPLOY_PASSWORD")
            }
            snapshotRepository(url: "http://maven.imagej.net/content/repositories/snapshots") {
                authentication(userName: "$System.env.CI_DEPLOY_USERNAME", password: "$System.env.CI_DEPLOY_PASSWORD")
            }
        }
    }
}











