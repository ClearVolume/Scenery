#version 450
#define USE_PRINTF 1

#if USE_PRINTF
#extension GL_EXT_debug_printf : enable
#endif

layout(set = 0, binding = 0) uniform VRParameters {
    mat4 projectionMatrices[2];
    mat4 inverseProjectionMatrices[2];
    mat4 headShift;
    float IPD;
    int stereoEnabled;
} vrParameters;

const int MAX_NUM_LIGHTS = 1024;

layout(set = 1, binding = 0) uniform LightParameters {
    mat4 ViewMatrices[2];
    mat4 InverseViewMatrices[2];
    mat4 ProjectionMatrix;
    mat4 InverseProjectionMatrix;
    vec3 CamPosition;
};

layout(push_constant) uniform currentEye_t {
    int eye;
} currentEye;

layout (local_size_x = 15, local_size_y = 15) in;
layout(set = 2, binding = 0, rgba8) uniform readonly image3D InputVDI;
layout(set = 3, binding = 0, rgba8) uniform image2D OutputViewport;

//mat4 im_x_9_x_ = mat4(50.0, 0.0, 0.0, 0.0,
//0.0, 50.0, 0.0, 0.0,
//0.0, 0.0, 50.0, 0.0,
//1.0, 1.0, 1.0, 1.0);

mat4 im_x_9_x_ = mat4 (33.33334, 0.00, 0.00, 0.00,
0.00, 33.33334, 0.00, 0.00,
0.00, 0.00, 33.33334, -66.66667,
0.00, 0.00, 0.00, 1.00);

//vec3 sourcemax_x_10_x_ = vec3(131.0, 131.0, 131.0);
vec3 sourcemax_x_10_x_ = vec3(128.0, 128.0, 128.0);

//ivec2 debug_pixel = ivec2(640, 360);
ivec2 debug_pixel = ivec2(490, 560);
//ivec2 debug_pixel = ivec2(275, 700);

const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
const vec4 bitDec = 1./bitEnc;
float DecodeFloatRGBA (vec4 v) {
    return dot(v, bitDec);
}

float adjustOpacity(float a, float modifiedStepLength) {
//    modifiedStepLength = max(1.0, modifiedStepLength);
    float b = pow((1.0 - a), modifiedStepLength);
//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Modified step length is: %f and b is: %f",
//            modifiedStepLength, b);
//    }
//    #endif
    return 1.0 - b;
}

struct rayProperties {
    vec4 NDC_front;
    vec4 NDC_back;
    vec4 wfront;
    vec4 wback;
};

mat4 pv_orig, ivp_orig;
int windowWidth, windowHeight;

// intersect ray with a box
// http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm
void intersectBox( vec3 r_o, vec3 r_d, vec3 boxmin, vec3 boxmax, out float tnear, out float tfar )
{
    // compute intersection of ray with all six bbox planes
    vec3 invR = 1 / r_d; // TODO: shouldn't r_d be a unit vector? And what if any component is 0?
    vec3 tbot = invR * ( boxmin - r_o );
    vec3 ttop = invR * ( boxmax - r_o );

    // re-order intersections to find smallest and largest on each axis
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);

    // find the largest tmin and the smallest tmax
    tnear = max( max( tmin.x, tmin.y ), max( tmin.x, tmin.z ) );
    tfar = min( min( tmax.x, tmax.y ), min( tmax.x, tmax.z ) );
}

void intersectBoundingBox_x_11_x_( vec4 wfront, vec4 wback, out float tnear, out float tfar )
{
    vec4 mfront = im_x_9_x_ * wfront;
    vec4 mback = im_x_9_x_ * wback;
    intersectBox( mfront.xyz, (mback - mfront).xyz, vec3( 0, 0, 0 ), sourcemax_x_10_x_, tnear, tfar );
}

void binSearch(int rayX, int rayY, int start, int limit, float dist_to_orig, out float depthStart, out float depthEnd, out int index, out bool supseg_found) {

    supseg_found = false;
    int low = start;
    int high = limit;

    while(low <= high) {
        index = (low + high)/2;
        vec4 d = imageLoad(InputVDI, ivec3(index*3 + 1, rayY, rayX)); //Start point of mid supersegment
        depthStart = DecodeFloatRGBA(d);

        if(index != 0 && depthStart == 0.0) {
            //this supersegment has not been filled
            high = index - 1;
            continue;
        }

        if(depthStart > dist_to_orig) { //this supersegment is ahead of the sample point
            high = index - 1;
        } else {
            vec4 dNext = imageLoad(InputVDI, ivec3(index*3 + 2, rayY, rayX)); //End point of this supersegment
            depthEnd = DecodeFloatRGBA(dNext);
            if(dist_to_orig <= depthEnd) {
                // this is the supersegment
                supseg_found = true;
                break;
            } else {
                low = index+1;
            }
        }
    }
}

void linSearch(int rayX, int rayY, int start, int limit, float dist_to_orig, out float depthStart, out float depthEnd, out int index, out bool supseg_found) {

    supseg_found = false;

    for(index = start; index < limit; index++) {
        //Find which supersegment along this ray

        vec4 d = imageLoad(InputVDI, ivec3(index*3 + 1, rayY, rayX)); //Start point of this supersegment
        depthStart = DecodeFloatRGBA(d);

        if(index!=0 && depthStart == 0.0) {
            break; // there are no more supersegments in this list, so break
        }

        //d
        if(dist_to_orig >= depthStart)
        {
            vec4 dNext = imageLoad(InputVDI, ivec3(index*3 + 2, rayY, rayX)); //End point of this supersegment
            depthEnd = DecodeFloatRGBA(dNext);
            if(dist_to_orig <= depthEnd) {
                // We have found the supersegment
                supseg_found = true;
                break;
            }
        } else {
            break; // this supersegment is already further from wfront than this sample point, so no point checking subsequent ones
        }
    }
}

void findListNumber(vec4 wpos, out ivec2 listNum, out vec4 NDC_orig) {
    //For this sample point, calculate ray number from original VDI
    NDC_orig = pv_orig * wpos;

    NDC_orig *= 1/NDC_orig.w; //TODO: check

    if(NDC_orig.x < -1 || NDC_orig.x > 1 || NDC_orig.y < -1 || NDC_orig.y > 1 || NDC_orig.z < -1 || NDC_orig.z > 1)
    {
        listNum = ivec2(-1, -1);
        NDC_orig = vec4(-1.);
        return; // This sample point is not in the original viewport and therefore cannot be in the VDI, continue onto the next sample point
    }

    vec2 tex_orig = (NDC_orig.xy + 1) / 2.0;

    listNum.x = int(round(tex_orig.x * windowWidth)); //TODO: verify that this is correct
    listNum.y = int(round(tex_orig.y * windowHeight)); //TODO: verify that this is correct
}


int prevX = -1, prevY = -1, depth = -1;

void supersegmentInList(ivec2 invoc_orig, vec4 NDC_orig, vec4 wpos, rayProperties newRay, out float depthStart, out float depthEnd, out int index, out bool supseg_found) {
    vec4 check = imageLoad(InputVDI, ivec3(2, invoc_orig.y, invoc_orig.x));
    if(DecodeFloatRGBA(check) == 0) {
        //the first supersegment is empty, so empty list
//        break; //TODO: change to continue
        depthStart = -1.;
        depthEnd = -1.;
        index = -1;
        supseg_found = false;
        return;
    }

    rayProperties originalRay;
    originalRay.wfront = ivp_orig * vec4(NDC_orig.xy, -1, 1);
    originalRay.wfront *= 1/originalRay.wfront.w;
    originalRay.wback = ivp_orig * vec4(NDC_orig.xy, 1, 1);
    originalRay.wback *= 1/originalRay.wback.w;

    vec4 direction_orig = (originalRay.wback - originalRay.wfront)/distance(originalRay.wfront, originalRay.wback);
    vec4 vector_sample = wpos - originalRay.wfront;
    float dist_to_orig = dot(vector_sample, direction_orig);
    dist_to_orig = dist_to_orig/distance(originalRay.wfront, originalRay.wback);

    bool dotPositive;
    float dotViewRays = dot((newRay.wfront - newRay.wback), (originalRay.wfront - originalRay.wback));
    if(dotViewRays > 0) {
        dotPositive = true;
    } else {
        dotPositive = false;
    }

    int start = 0;
    int numSupersegments = 20;

    binSearch(invoc_orig.x, invoc_orig.y, start, numSupersegments, dist_to_orig, depthStart, depthEnd, index, supseg_found);

//    if(depth != -1 && invoc_orig.x == prevX && invoc_orig.y == prevY && dotPositive) {
//        linSearch(invoc_orig.x, invoc_orig.y, depth, numSupersegments, dist_to_orig, depthStart, depthEnd, index, supseg_found);
//    } else {
//        binSearch(invoc_orig.x, invoc_orig.y, start, numSupersegments, dist_to_orig, depthStart, depthEnd, index, supseg_found);
//    }
}

//float dist = 1./500000.;
float dist;
void findNextSupersegment(rayProperties newRay, inout float step, float tfar, out ivec2 listCoords, out float depthStart, out float depthEnd, out int index, out bool supseg_found) {
    //use brute-force stepping to find the next supersegment

    supseg_found = false;

    while(!supseg_found && step <= tfar) {
        vec4 wpos = mix( newRay.wfront, newRay.wback, step );

        ivec2 invoc_orig;
        vec4 NDC_orig;

        findListNumber(wpos, invoc_orig, NDC_orig);
        if(invoc_orig == ivec2(-1, -1)) {
            step += dist;
            continue;
        }
        listCoords = invoc_orig;

        supersegmentInList(invoc_orig, NDC_orig, wpos, newRay, depthStart, depthEnd, index, supseg_found);
        step += dist;
    }
}

void intersectSupersegment(rayProperties newRay, float step, ivec2 listCoords, vec4 supseg_start_w, vec4 supseg_end_w, out float length_in_supseg) {
//

//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("The supersegment: (%d, %d), end-points: %f, %f", listCoords, supseg_start, supseg_end);
//    }
//    #endif

    vec4 wpos = mix(newRay.wfront, newRay.wback, step);

    vec2 low_ = listCoords - 0.5;
    vec2 high_ = listCoords + 0.5;

    vec2 tex_min = low_/vec2(windowWidth, windowHeight);
    vec2 tex_max = high_/vec2(windowWidth, windowHeight);

    vec2 uv_min = tex_min * 2.0 - vec2(1.0);
    vec2 uv_max = tex_max * 2.0 - vec2(1.0);

    vec4 a_ = pv_orig * supseg_start_w;
    a_ *= 1. / a_.w;
    vec4 b_ = pv_orig * supseg_end_w;
    b_ *= 1. / b_.w;

    vec4 front_orig = pv_orig * newRay.wfront; // start point of ray in NDC coordinates of original viewpoint
    front_orig *= 1.0 / front_orig.w;
    vec4 back_orig = pv_orig * newRay.wback; // end point of ray in NDC coordinates of original viewpoint
    back_orig *= 1.0 / back_orig.w;

    float p1, p2;

    vec3 rayDirection = (back_orig - front_orig).xyz;
//    vec3 rayDirection = vec3(0.00001, 0.000001, 2);
    rayDirection = normalize(rayDirection); // TODO can be removed possibly
//    front_orig = vec4(0, 0, -1, 1);
    vec3 box_min, box_max;

    box_min = vec3( uv_min, a_.z );
    box_max = vec3( uv_max, b_.z );

    intersectBox( front_orig.xyz, rayDirection, box_min, box_max, p1, p2 );

    vec4 end_point = vec4(front_orig.xyz + rayDirection.xyz*p2, 1);
    vec4 start_pt = vec4(front_orig.xyz + rayDirection.xyz*p1, 1);

//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Ray origin and dir were (%f, %f, %f), (%f, %f, %f). Box coords: (%f, %f, %f), (%f, %f, %f). P1: %f and P2: %f",
//            front_orig.xyz, rayDirection, low_pt, high_pt, p1, p2 );
//        debugPrintfEXT("Next point in NDC is: %f %f %f, while start pt was: (%f, %f, %f)", end_point.xyz, start_pt.xyz);
//    //        debugPrintfEXT("In world space, calculated next pt is: %f %f %f, while actual next pt should be: %f %f %f", wpos_next.xyz, b.xyz);
//    }
//    #endif

    vec4 wpos_next = ivp_orig * end_point;
    wpos_next *= 1. / wpos_next.w;

    vec4 wpos_first = ivp_orig * start_pt;
    wpos_first *= 1. / wpos_first.w;

    float start_dist = distance(wpos_first, newRay.wfront);
    float end_dist = distance(wpos_next, newRay.wfront);

//    float dir_w = dot((newRay.wback-newRay.wfront), (originalRay.wback - originalRay.wfront));

//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Start pt calculated is %f from ray origin, while end pt is: %f",
//            start_dist, end_dist );
////        debugPrintfEXT("Dot product in w space %f",
////            dir_w );
//    }
//    #endif

//    #if USE_PRINTF
////    if(gl_GlobalInvocationID.xy == debug_pixel) {
////        debugPrintfEXT("Optimized calculations: wpos is: (%f, %f, %f) and in original NDC, that's: (%f, %f, %f). Starting wpos was: (%f, %f, %f)",
////            wpos_next.xyz, end_point.xyz, wpos.xyz );
////        debugPrintfEXT("Ray length is: %f",
////            distance(newRay.wfront, newRay.wback) );
////    }
////    #endif

//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Ray origin is: %f %f %f, direction is: %f %f %f. Box min: %f %f %f and max: %f %f %f. P2 is: %f",
//            front_orig.xyz, rayDirection, vec3( uv_min, a_.z ), vec3( uv_max, b_.z ), p2);
////        debugPrintfEXT("Next point in NDC is: %f %f %f", end_point.xyz);
////        debugPrintfEXT("In world space, calculated next pt is: %f %f %f, while actual next pt should be: %f %f %f", wpos_next.xyz, b.xyz);
//    }
//    #endif

    if(start_dist > end_dist) {
        length_in_supseg = distance(wpos_first, wpos);
    } else {
        length_in_supseg = distance(wpos_next, wpos);
    }
    /* We calculate the distance from the ray origin to both intersection points of the ray and the supersegment. This
     * is because the intersection points are calculated in NDC space (of original viewpoint), so we do not know which
     * intersection point is the one farther away from ray origin in world space. It could happen that the ray in world
     * space is oriented differently than in NDC space with respect to the box.
     *
    */

///distance(newRay.wfront, newRay.wback);
}

void intersectSupersegment_bruteForce(rayProperties newRay, float step, float tfar, ivec2 listCoords, int supseg_num, out float length_in_supseg) {

    vec4 startPoint = mix( newRay.wfront, newRay.wback, step );
    bool sameSupersegment = true;
    vec4 wpos;
    int cnt = 0;
    while(sameSupersegment && step <= tfar) {
        cnt++;
        wpos = mix( newRay.wfront, newRay.wback, step );

        ivec2 invoc_orig;
        vec4 NDC_orig;

        findListNumber(wpos, invoc_orig, NDC_orig);
        if(invoc_orig != listCoords) {
            sameSupersegment = false;
            break;
        }
        float depthStart, depthEnd;
        int index;
        bool supseg_found;
        supersegmentInList(invoc_orig, NDC_orig, wpos, newRay, depthStart, depthEnd, index, supseg_found);
        if(!supseg_found || (index != supseg_num)){
            sameSupersegment = false;
            break;
        }
        step += dist;
    }

//    #if USE_PRINTF
//    if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Number of steps taken in the supersegment is %d", cnt);
//        debugPrintfEXT("Starting wpos was (for brute): (%f, %f, %f)", startPoint.xyz);
//    }
//    #endif

    length_in_supseg = distance(wpos, startPoint);
///distance(newRay.wfront, newRay.wback);
}

void main() {
    im_x_9_x_ = transpose(im_x_9_x_);

    ivec2 imageCoords  = imageSize(OutputViewport);
    int imgWidth = imageCoords.x;
    int imgHeight = imageCoords.y;

    windowWidth = 1280;
    windowHeight = 720;

    int numSupersegments = imageSize(InputVDI).r/3;
    numSupersegments = 20;

    highp mat4 ipv = InverseViewMatrices[0] * InverseProjectionMatrix;

    mat4 ViewOriginal = mat4(-0.86781174,  1.0376796E-4, -0.49694782,  2.299E+0,
    0.11692904,  0.9719932, -0.20398827, -1.3797543,
    0.48299563, -0.23512466, -0.8434963, -2.1878958,
    0.0,  0.0, 0.0,  1.000E+0);
    ViewOriginal = transpose(ViewOriginal);

    mat4 invViewOriginal = mat4(-0.86781174,  0.11692904,  0.48299563,  3.2131748,
    1.0376796E-4,  0.9719932, -0.23512466,  0.826445,
    -0.49694782, -0.20398827, -0.8434963, -0.9844537,
    0.000E+0,  0.000E+0,  0.000E+0,  1.000E+0);
    invViewOriginal = transpose(invViewOriginal);

    mat4 ProjectionOriginal = mat4(1.206285,  0.0,  0.0,  0.0,
    0.0, -2.1445067,  0.0,  0.0,
    0.0,  0.0, -1.0050251, -0.10050251,
    0.0,  0.0, -1.0,  0.0);
    ProjectionOriginal = transpose(ProjectionOriginal);

    mat4 invProjectionOriginal = mat4(0.8289915,  0.000E+0,  0.000E+0, -0.000E+0,
    0.000E+0, -0.4663077,  0.000E+0,  0.000E+0,
    0.000E+0, -0.000E+0,  0.000E+0, -1.0,
    0.000E+0,  0.000E+0, -9.949999,  10.0);
    invProjectionOriginal = transpose(invProjectionOriginal);

    pv_orig = ProjectionOriginal * ViewOriginal;

    ivp_orig = invViewOriginal * invProjectionOriginal;

    vec2 texcoord = gl_GlobalInvocationID.xy/vec2(windowWidth, windowHeight);
    vec2 uv = texcoord * 2.0 - vec2(1.0);
    vec2 depthUV = (vrParameters.stereoEnabled ^ 1) * texcoord + vrParameters.stereoEnabled * vec2((texcoord.x/2.0 + currentEye.eye * 0.5), texcoord.y);
    depthUV = depthUV * 2.0 - vec2(1.0);

    rayProperties newRay;

    // NDC of frag on near and far plane
    newRay.NDC_front = vec4( uv, -1, 1 );
    newRay.NDC_back = vec4( uv, 1, 1 );

    // calculate eye ray in world space
    newRay.wfront = ipv * newRay.NDC_front;
    newRay.wfront *= 1.0 / newRay.wfront.w;
    newRay.wback = ipv * newRay.NDC_back;
    newRay.wback *= 1 / newRay.wback.w;

    vec4 front_orig = pv_orig * newRay.wfront; // start point of ray in NDC coordinates of original viewpoint
    front_orig *= 1.0 / front_orig.w;
    vec4 back_orig = pv_orig * newRay.wback; // end point of ray in NDC coordinates of original viewpoint
    back_orig *= 1.0 / back_orig.w;

    // -- bounding box intersection for all volumes ----------
    float tnear = 1, tfar = 0, tmax = 0; //getMaxDepth( depthUV );
    float n, f;

    bool vis = false;
    intersectBoundingBox_x_11_x_( newRay.wfront, newRay.wback, n, f );
    //    f = min( tmax, f );
    if ( n < f )
    {
        tnear = min( tnear, max( 0, n ) );
        tfar = max( tfar, f );
        vis = true;
    }

    dist = (tfar-tnear) / 25000.;
    dist = max(dist, 0.000001);

    vec4 v = vec4(0);

    float step = tnear;

    bool firstSample = true;
    vec4 start_sample = vec4(-1);
    float supseg_start = 0, supseg_end = 0;
//    float depthStart = 0, depthEnd = 0;
    vec4 supseg_col = vec4(0);

    bool supseg_found = false;
    int index;
    ivec2 listCoords;
    int cnt = 0;
    if(step > tfar) v = vec4(1, 0, 0, 1);
    while ( step < tfar )
    {
        cnt++;
        if(cnt > 70) break;
        findNextSupersegment(newRay, step, tfar, listCoords, supseg_start, supseg_end, index, supseg_found);
        if(supseg_found == false) {
            break; // there is no supersegment along this ray, so terminate
        }

        depth = index;
        prevX = listCoords.x;
        prevY = listCoords.y;

//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
//            debugPrintfEXT("Supseg found is: (%d, %d), %d", listCoords, index);
//        }
//        #endif

        vec2 tex_orig = listCoords/vec2(windowWidth, windowHeight);
        vec2 uv_orig_ray = tex_orig * 2.0 - vec2(1.0);

        rayProperties originalRay;
        originalRay.NDC_front = vec4(uv_orig_ray, -1, 1);
        originalRay.NDC_back = vec4(uv_orig_ray, 1, 1);

        originalRay.wfront = ivp_orig * originalRay.NDC_front;
        originalRay.wfront *= 1./originalRay.wfront.w;
        originalRay.wback = ivp_orig * originalRay.NDC_back;
        originalRay.wback *= 1./originalRay.wback.w;

        vec4 supseg_start_w = mix(originalRay.wfront, originalRay.wback, supseg_start);
        vec4 supseg_end_w = mix(originalRay.wfront, originalRay.wback, supseg_end);

        float length2;
        intersectSupersegment(newRay, step, listCoords, supseg_start_w, supseg_end_w, length2);

        float len_frac_opt = length2 / distance(newRay.wfront, newRay.wback);
        step += len_frac_opt;
//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
//            debugPrintfEXT("Length computed by optimized approoach is: %f", len_frac_opt);
//        }
//        #endif

        ///////////////
        // Check whether what we found was indeed the end of the supersegment

        float delta = -1.*dist;
        float tempStep = step + len_frac_opt + 1*dist;

        float total_delta = tempStep - step;

        ivec2 list_check;
        int index_check;
        bool found_check;
        float ds_temp, de_temp;

        findNextSupersegment(newRay, tempStep, tempStep, list_check, ds_temp, de_temp, index_check, found_check);

        if(found_check && (list_check.x == prevX) && (list_check.y == prevY) && (index_check == depth)) {
            #if USE_PRINTF
            if(gl_GlobalInvocationID.xy == debug_pixel) {
                debugPrintfEXT("After intersecting the supersegment, found the same one again. Supseg: (%d, %d), %d. Distance jumped: %f", list_check, index_check, total_delta);
                vec4 wtemp = mix(newRay.wfront, newRay.wback, tempStep);
                vec4 ntemp = pv_orig * wtemp;
                ntemp *= 1. / ntemp.w;
                debugPrintfEXT("NDC of the new point is: (%f, %f, %f)", ntemp.xyz);
            }
            #endif
        } else {
            #if USE_PRINTF
            if(gl_GlobalInvocationID.xy == debug_pixel) {
                debugPrintfEXT("The supersegment passed the test. Next supseg: (%d, %d), %d. Distance jumped was: %f", list_check, index_check, total_delta);
            }
            #endif
        }

        ///////////////


//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
//            debugPrintfEXT("Step value before stepping through: %f", step);
//        }
//        #endif


//        float length_in_supseg = 0.;
//        intersectSupersegment_bruteForce(newRay, step, tfar, listCoords, index, length_in_supseg);
////        step += length_in_supseg;
//
//        float len_frac = length_in_supseg / distance(newRay.wfront, newRay.wback);

//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
//            debugPrintfEXT("Step value after stepping through the supseg: %f", step);
//            debugPrintfEXT("Distance calculated by the method: %f", len_frac);
//        }
//        #endif


        supseg_col = imageLoad(InputVDI, ivec3(index*3, listCoords.y, listCoords.x));

//        float alpha = adjustOpacity(supseg_col.a, (length_in_supseg/distance(supseg_end,supseg_start)));
        float supseg_adjusted = adjustOpacity(supseg_col.a, (1. / distance(supseg_start_w, supseg_end_w)));
//        float alpha = adjustOpacity(supseg_col.a, 1000000.);
//        float alpha = 0.05;
        float alpha = adjustOpacity(supseg_adjusted, length2 );

//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
//        debugPrintfEXT("Original opacity: %f and recalculated opacity %f",
//            supseg_col.a, alpha);
//        }
//        #endif

        vec4 wpos_next = mix(newRay.wfront, newRay.wback, step);
        vec4 NDC_next = pv_orig * wpos_next;
        NDC_next *= 1/NDC_next.w;

//        #if USE_PRINTF
//        if(gl_GlobalInvocationID.xy == debug_pixel) {
////            debugPrintfEXT("Using brute force calculations, wpos: (%f, %f, %f) and in original NDC, that's: (%f, %f, %f)",
////                wpos_next.xyz, NDC_next.xyz);
//            debugPrintfEXT("Distance calculated by brute force: %f, optimized: %f. Supseg width: %f and opacity: %f",
//                length_in_supseg, length2, (supseg_end - supseg_start), supseg_col.a);
////            debugPrintfEXT("Supersegment %d alpha is: (%f)", cnt, supseg_col.a);
//        }
//        #endif

        v.rgb = v.rgb + (1-v.a) * supseg_col.rgb * alpha;
        v.a = v.a + (1-v.a) * alpha;

//        if(listCoords != ivec2(-1, -1)) {
//            v.r = listCoords.x/600.;
//            v.g = listCoords.y/600.;
//            v.b = 0;
//            v.a = 1;
//        }
//        break;
//        step += length_in_supseg;
    }

    #if USE_PRINTF
    if(gl_GlobalInvocationID.xy == debug_pixel) {
        debugPrintfEXT("Total supersegments found was %d. Therefore, color is (%f, %f, %f, %f)", cnt, v);
        debugPrintfEXT("tfar value is %f and step is %f", tfar, step);
    }
    #endif

    imageStore(OutputViewport, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), v);
}
