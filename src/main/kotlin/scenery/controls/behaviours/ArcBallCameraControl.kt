package scenery.controls.behaviours

import cleargl.util.arcball.ArcBall
import com.jogamp.opengl.math.Quaternion
import org.scijava.ui.behaviour.DragBehaviour
import scenery.Node

/**
 * Arc ball camera control, extends DragBehaviour
 *
 * @author Ulrik GÃ¼nther <hello@ulrik.is>
 * @property[name] Name of the control
 * @property[node] The node to control with the arcball
 * @property[w] Window width
 * @property[h] Window height
 * @constructor Creates a new arc ball drag behaviour
 */
class ArcBallCameraControl(private val name: String, private val node: Node, private val w: Int, private val h: Int) : DragBehaviour {
    /** arcball state */
    private val arcball = ArcBall()
    /** last quaternion generated by the arcball */
    private var last = Quaternion(0.0f, 0.0f, 0.0f, 1.0f)

    init {
        arcball.setBounds(w.toFloat(), h.toFloat())
    }

    /**
     * This function is called upon mouse down and initialises the arcball
     * with the current rotation state and window size.
     *
     * @param[x] x position in window
     * @param[y] y position in window
     */
    override fun init(x: Int, y: Int) {
        arcball.setBounds(w.toFloat(), h.toFloat())
        arcball.setCurrent(node.rotation)
        arcball.click(w.toFloat(), h.toFloat())
    }

    /**
     * This function is called upon mouse-down movement and updates
     * the rotation state.
     *
     * @param[x] the current x position in the window
     * @param[y] the current y position in the window
     */
    override fun drag(x: Int, y: Int) {
        arcball.setBounds(w.toFloat(), h.toFloat())
        node.rotation = arcball.drag(x.toFloat(), y.toFloat())
    }

    /**
     * This function is called when the mouse down ends and currently
     * does nothing.
     */
    override fun end(x: Int, y: Int) = Unit
}
