cache:
  key:
    files:
      - gradle/wrapper/gradle-wrapper.properties
  paths:
    - pdb-store/
    - .gradle-user-home/
    - node_modules/

variables:
  JAVA_HOME: "/usr/lib/jvm/java-11-openjdk-amd64"
  PDB_CACHE_DIR: "./pdb-store/cache"
  PDB_DIR: "./pdb-store"
  MODEL_DIR: "./models"
  GRADLE_USER_HOME: "./.gradle-user-home"

# simple unit tests without requiring GPUs
unit-tests-no-gpu:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
  image: ubuntu:bionic
  before_script:
    - mkdir -p ./pdb-store/cache
    - apt-get update -qq --force-yes > /dev/null
    - apt-get install -qq -y --allow-downgrades --allow-remove-essential --allow-change-held-packages unzip wget git curl libgl1-mesa-glx sudo sed openjdk-11-jdk-headless > /dev/null
    - if [ ! -d "$MODEL_DIR" ]; then wget -q https://ulrik.is/scenery-demo-models.zip && unzip -q scenery-demo-models.zip; fi
    - chmod +x gradlew
  script:
    - ./gradlew build -x dokkaHtml -x dokkaHtmlJar -x javadoc -x dokkaJavadocJar --build-cache

# base job for running with GPUs
.base-job-gpu: &base-job-gpu
  before_script:
    - mkdir -p ./pdb-store/cache
    # Installs Maven, Vulkan development libraries, etc.
    - apt-get update -qq --force-yes > /dev/null
    - apt-get install -qq -y curl sudo sed > /dev/null
    - sudo sed -i -e '/^assistive_technologies=/s/^/#/' /etc/java-*-openjdk/accessibility.properties
    # Output Vulkan driver information, but do not fail in case of non-zero
    # return (happens e.g. if $DISPLAY is not set)
    - echo -e "\e[0Ksection_start:`date +%s`:build_section[collapsed=true]\r\e[0KVulkan/OpenCL System Information"
    - vulkaninfo || true
    - clinfo || true
    - echo -e "\e[0Ksection_end:`date +%s`:build_section\r\e[0K"
    - if [ ! -d "$MODEL_DIR" ]; then wget -q https://ulrik.is/scenery-demo-models.zip && unzip -q scenery-demo-models.zip; fi
    - chmod +x gradlew
    - ./gradlew --stop # stop any deamon https://stackoverflow.com/a/58397542/1047713
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:build_section[collapsed=true]\r\e[0KGeneral build"
    - ./gradlew build jacocoTestReport --build-cache --full-stacktrace -x dokkaHtml -x dokkaHtmlJar -x javadoc -x dokkaJavadocJar
    - echo -e "\e[0Ksection_end:`date +%s`:build_section\r\e[0K"
    # basic group
    - echo -e "\e[0Ksection_start:`date +%s`:basic_section[collapsed=true]\r\e[0KBasic Test Group"
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=basic -Dscenery.ExampleRunner.Configurations=DeferredShading.yml -Dscenery.RandomSeed=13371842 -Dscenery.ExampleRunner.Blocklist=EdgeBundlerExample
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=basic -Dscenery.ExampleRunner.Configurations=DeferredShadingStereo.yml -Dscenery.RandomSeed=13371842 -Dscenery.ExampleRunner.Blocklist=EdgeBundlerExample
    - echo -e "\e[0Ksection_end:`date +%s`:basic_section\r\e[0K"
    # advanced group
    - echo -e "\e[0Ksection_start:`date +%s`:advanced_section[collapsed=true]\r\e[0KAdvanced Test Group"
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=advanced -Dscenery.ExampleRunner.Configurations=DeferredShading.yml -Dscenery.RandomSeed=13371842
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=advanced -Dscenery.ExampleRunner.Configurations=DeferredShadingStereo.yml -Dscenery.RandomSeed=13371842
    - echo -e "\e[0Ksection_end:`date +%s`:advanced_section\r\e[0K"
    # compute group
    - echo -e "\e[0Ksection_start:`date +%s`:compute_section[collapsed=true]\r\e[0KCompute Test Group"
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=compute -Dscenery.ExampleRunner.Configurations=DeferredShading.yml -Dscenery.RandomSeed=13371842
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=compute -Dscenery.ExampleRunner.Configurations=DeferredShadingStereo.yml -Dscenery.RandomSeed=13371842
    - echo -e "\e[0Ksection_end:`date +%s`:compute_section\r\e[0K"
    # volumes group
    - echo -e "\e[0Ksection_start:`date +%s`:volumes_section[collapsed=true]\r\e[0KVolumes Test Group"
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=volumes -Dscenery.ExampleRunner.Configurations=DeferredShading.yml -Dscenery.RandomSeed=13371842
    - ./gradlew test jacocoTestReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=volumes -Dscenery.ExampleRunner.Configurations=DeferredShadingStereo.yml -Dscenery.RandomSeed=13371842
    - echo -e "\e[0Ksection_end:`date +%s`:volumes_section\r\e[0K"
    # code coverage reporting
    - echo -e "\e[0Ksection_start:`date +%s`:coverage_section[collapsed=true]\r\e[0KCode Coverage and Analysis"
    # we keep the same arguments here as in the last test run to not startle Gradle into re-running the test task
    - ./gradlew fullCodeCoverageReport --build-cache --full-stacktrace -Pgpu=true -Dscenery.ExampleRunner.TestGroup=volumes -Dscenery.ExampleRunner.Configurations=DeferredShadingStereo.yml -Dscenery.RandomSeed=13371842
    - echo -e "\e[0Ksection_end:`date +%s`:coverage_section\r\e[0K"
  artifacts:
    when: always
    expire_in: 48h
    paths:
      - results.tar.bz2
      - "hs_err_*"

scenery-nvidia:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "external_pull_request_event"'
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
  variables:
    ON_GPU: "true"
  image: scenerygraphics/nvidia-vulkan:1.3.216.0-ubuntu20.04-updatedmodels
  <<: *base-job-gpu
  after_script:
    - nvidia-smi
  tags:
    - cuda
    - intel

package-and-upload-screenshots:
  rules:
    - when: on_success
    - if: $ON_GPU == "true"
  script:
    - tar cvjf results.tar.bz2 screenshots/
    - npm install @argos-ci/cli
    - ARGOS_COMMIT=$CI_COMMIT_SHA ARGOS_BRANCH=$CI_COMMIT_REF_NAME ./node_modules/\@argos-ci/cli/bin/argos-cli.js upload screenshots/ || true
